{"version":3,"sources":["components/SearchBox.js","components/Card.js","components/CardList.js","components/ScrollArea.js","containers/App.js","serviceWorker.js","index.js"],"names":["SearchBox","onSearchChange","className","type","name","placeholder","onChange","Card","id","email","alt","src","CardList","robots","map","users","i","key","ScrollArea","props","style","overflowY","height","border","children","App","event","setState","SearchField","target","value","state","fetch","then","respone","json","data","this","filteredRobots","filter","robot","toLocaleLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"+MAgBeA,EAdG,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,eACnB,OACE,yBAAKC,UAAU,OACb,2BACEC,KAAK,OACLC,KAAK,eACLC,YAAY,eACZH,UAAU,kCACVI,SAAUL,MCCHM,EATF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,GAAIJ,EAAkB,EAAlBA,KAAMK,EAAY,EAAZA,MACxB,OACE,yBAAKP,UAAU,mDACb,yBAAKQ,IAAI,MAAMC,IAAG,+BAA0BH,EAA1B,uBAClB,wBAAIN,UAAU,OAAOE,GACrB,2BAAIK,KCaKG,EAjBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAClB,OACE,6BACGA,EAAOC,KAAI,SAACC,EAAOC,GAClB,OACE,kBAAC,EAAD,CACEZ,KAAMW,EAAMX,KACZI,GAAIO,EAAMP,GACVC,MAAOM,EAAMN,MACbQ,IAAKF,EAAMP,UCIRU,EAdI,SAACC,GAClB,OACE,yBACEC,MAAO,CACLC,UAAW,SACXC,OAAQ,QACRC,OAAQ,oBAGTJ,EAAMK,WCyCEC,E,kDA9Cb,aAAe,IAAD,8BACZ,gBAOFxB,eAAiB,SAACyB,GAChB,EAAKC,SAAS,CACZC,YAAaF,EAAMG,OAAOC,SAR5B,EAAKC,MAAQ,CACXlB,OAAQ,GACRe,YAAa,IAJH,E,gEAcO,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAACC,GACL,OAAOA,EAAQC,UAEhBF,MAAK,SAACG,GACL,EAAKT,SAAS,CACZd,OAAQuB,S,+BAKN,IAAD,EACyBC,KAAKN,MAA7BlB,EADD,EACCA,OAAQe,EADT,EACSA,YACVU,EAAiBzB,EAAO0B,QAAO,SAACC,GACpC,OAAOA,EAAMpC,KACVqC,oBACAC,SAASd,EAAYa,wBAG1B,OACE,yBAAKvC,UAAU,MACb,wBAAIA,UAAU,gBAAd,eACA,kBAAC,EAAD,CAAWD,eAAgBoC,KAAKpC,iBAChC,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUY,OAAQyB,U,GAxCVK,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.b11c7842.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst SearchBox = ({ onSearchChange }) => {\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input\r\n        type=\"text\"\r\n        name=\"searchRobots\"\r\n        placeholder=\"Enter robots\"\r\n        className=\"pa3 ba b--green bg-lighest-blue\"\r\n        onChange={onSearchChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from \"react\";\r\n\r\nconst Card = ({ id, name, email }) => {\r\n  return (\r\n    <div className=\"pa3 tc bg-light-green shadow-3 dib grow ma3 br3\">\r\n      <img alt=\"img\" src={`https://robohash.org/${id}.png?size=200x200`} />\r\n      <h1 className=\"f-1\">{name}</h1>\r\n      <p>{email}</p>\r\n    </div>\r\n  );\r\n};\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <div>\r\n      {robots.map((users, i) => {\r\n        return (\r\n          <Card\r\n            name={users.name}\r\n            id={users.id}\r\n            email={users.email}\r\n            key={users.id}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\n\r\nconst ScrollArea = (props) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        overflowY: \"scroll\",\r\n        height: \"500px\",\r\n        border: \"1px solid black\",\r\n      }}\r\n    >\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ScrollArea;\r\n","import React, { Component } from \"react\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport CardList from \"../components/CardList\";\r\nimport ScrollArea from \"../components/ScrollArea\";\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      robots: [],\r\n      SearchField: \"\",\r\n    };\r\n  }\r\n\r\n  onSearchChange = (event) => {\r\n    this.setState({\r\n      SearchField: event.target.value,\r\n    });\r\n  };\r\n\r\n  componentDidMount() {\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n      .then((respone) => {\r\n        return respone.json();\r\n      })\r\n      .then((data) => {\r\n        this.setState({\r\n          robots: data,\r\n        });\r\n      });\r\n  }\r\n\r\n  render() {\r\n    const { robots, SearchField } = this.state;\r\n    const filteredRobots = robots.filter((robot) => {\r\n      return robot.name\r\n        .toLocaleLowerCase()\r\n        .includes(SearchField.toLocaleLowerCase());\r\n    });\r\n\r\n    return (\r\n      <div className=\"tc\">\r\n        <h1 className=\"f1 pa3 white\">Robofriends</h1>\r\n        <SearchBox onSearchChange={this.onSearchChange} />\r\n        <ScrollArea>\r\n          <CardList robots={filteredRobots} />\r\n        </ScrollArea>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/App.js\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"tachyons\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}